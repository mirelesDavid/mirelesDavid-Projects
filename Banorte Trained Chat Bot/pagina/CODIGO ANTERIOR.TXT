----------------------------index.html------------------------------------
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <title>Asesor Financiero Chatbot</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="icon" href="icon.png" type="image/png">
    <script src="script.js" defer></script>
</head>
<body class = "show-chatbot">
    <div class="top-bar">
        <p>Grupo Financiero Banorte</p>
    </div>
    <div class="chatbot">
        <header>
            <img src="./banorte.jpg" alt="Logo de Asesor Financiero" class="logo">
            <h2>Asesor Financiero</h2>
        </header>
        <ul class = "chatbox">
            <li class = "chat incoming">
                <img src="./UntitledROBOT AI.png" alt="Logo AI" class="logoAi">
                <p>¡Hola!<br>En qué puedo ser de su ayuda</p>
            </li>
        </ul>
        <div class="chat-input">
            <textarea placeholder = "Mande mensaje . . ."></textarea>
            <button id="send-button">Enviar</button>


    </div>
    <script src="script.js"></script>
</body>
</html>
---------------------------styles.css-----------------------------------

body {
    font-family: 'Arial', sans-serif;
    background-color: #e6a8a8;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.top-bar {
    background-color: #d12121; /* Cambia este color al que desees */
    text-align: center;
    padding: 10px 0;
    color: #fff; /* Color del texto */
    font-size: 1.2rem; /* Tamaño del texto */
    font-weight: bold; /* Negrita del texto */
}

.chatbot {
    position:initial;
    right: 40px;
/* poner el bottom dependiendo de la imagen */
    bottom: 100px;
    width: 800px;
    transform: scale(0.5);
    opacity: 0;
    pointer-events: none;
    overflow: hidden;
    background: #fff;
    border-radius: 15px;
    box-shadow: 0 0 128px 0 rgba(0, 0, 0, 0.1),
                0 32px 64px -48px rgba(0, 0, 0, 0.5)
}


.top-bar {
    background-color: #d12121; /* Color de fondo que desees */
    color: #fff; /* Color del texto */
    text-align: left;
    padding: 10px 0;
    font-size: 1.2rem;
    font-weight: bold;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 1; /* Asegura que esté por encima del chatbot */
}


.show-chatbot .chatbot{
    transform: scale(1);
    opacity: 1;
    pointer-events: auto;
}



.chatbot header{
    background: #d12121;
    padding: 16px 0;
    text-align: center;
    position: relative;
}

.chatbot header h2
{
    color: #fff;
    font-size: 1.4rem;
}


.chatbot .chatbox
{
    height: 510px;
    overflow-y: auto;
    padding: 30px 20px 100px;
}

.chatbox .chat{
    display: flex;
}

.logo {
    width: 300px;
    height: 35px;
    margin-right: 10px;
    align-self: flex-end;
    background:#d12121 ;
    text-align: center;
    border-radius: 10px;
    margin: 10 0px 0px 10;
}

.chatbox .incoming img{
    height: 35px;
    width: 40px;
    align-self:center;
    background:#d12121 ;
    text-align: center;
    line-height: 20px;
    border-radius: 10px;
    margin: 0 10px 10px 0;
}

.chatbox .outgoing{
    margin: 20px 0;
    justify-content: flex-end;
} 


.chatbox .chat p {
    color : #fff;
    max-width: 75%;
    white-space: pre-wrap;
    font-size: 0.95rem;
    padding: 12px 16px;
    border-radius: 10px 10px 0 10px;
    background:#d19292 ;

}

.chatbox .incoming p 
{
    color: #ffffff;
    background-color: #d12121;
    border-radius: 10px 10px 10px 0;
}

.chatbot .chat-input{
    position: absolute;
    bottom: 0;
    width: 100%;
    display: flex;
    gap: 5px;
    background: #fff;
    padding: 5px 20px;
    border-top: 1px solid #d12121;
}

.chat-input textarea{
    height: 55px;
    width: 100%;
    border: none;
    outline: none;
    font-size: 0.95rem;
    resize: none;
    padding: 16px 15px 16px 0;

}


.chat-input button {
    height: 35px;
    background-color: #8B0000; /* Cambia a rojo guinda */
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    font-size: 1em;
    margin-bottom: 40px;
    margin-right: 50px;
}


/* Agregar una animación de resaltado al botón de enviar */
#send-button {
    background-color: #8B0000; /* Cambia a rojo guinda */
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    font-size: 1em;
    transition: background-color 0.3s ease;
}

#send-button:hover {
    background-color: #610303; /* Cambia el color al pasar el cursor sobre el botón */
}

.chat-container {
    width: 400px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    border-radius: 15px;
    overflow: hidden;
    font-family: 'Arial', sans-serif;
}


.chat-log {
    padding: 15px;
    max-height: 300px;
    overflow-y: auto;
}

.user-message, .bot-message {
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    max-width: 70%;
}

.user-message {
    background-color: #8B0000; /* Cambia a rojo guinda */
    color: #fff;
    align-self: flex-end;
}

.bot-message {
    background-color: #f5f5f5;
    color: #000;
    align-self: flex-start;
}

.chat-input {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
}

#user-input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin-right: 10px;
    font-size: 1em;
}



@media(max-width: 490px){
    .chatbot {
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        border-radius: 0;
    }
    .chatbot.chatbox{
        height: 90%;
    }
}
---------------------scripts.js--------------------------
document.addEventListener("DOMContentLoaded", () => {
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input button");
    const chatbox = document.querySelector(".chatbox");


    let userMessage;
    const API_KEY = "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";
    
    const createChatLi = (message, className) => {
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", className);
        let chatContent  = className === "outgoing" ? `<p></p>` : `<img src="./UntitledROBOT AI.png" alt="Logo AI" class="logoAi"><p></p>`;
        chatLi.innerHTML = chatContent;
        chatLi.querySelector("p").textContent = message;
        return chatLi;
    }

    const generateRespond = (incomingChatLi)=> {
        const API_URL = "https://api.openai.com/v1/chat/completions";
        const messageElement = incomingChatLi.querySelector("p");

        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
                "model": "gpt-3.5-turbo",
                "messages": [
                  {
                    "role": "system",
                    "content": userMessage
                  },
                  {
                    "role": "user",
                    "content": userMessage
                  }
                ]
            })
        }

        fetch(API_URL, requestOptions).then(res => res.json()).then(data => {
            messageElement.textContent = data.choices[0].message.content;
        }).catch((error) =>{
            messageElement.textContent = "Oops! algo salio mal. Intente de nuevo";
        }).finally(()=> chatbox.scroll(0,chatbox.scrollHeight));
    }

    const handleChat = () => {
        userMessage = chatInput.value.trim();
        if(!userMessage) return;
        chatInput.value = "";


        // Remove the message from the chat input.
        chatInput.value = "";
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);

        setTimeout(()=>{
            const incomingChatLi = createChatLi("Pensando...", "incoming");
            chatbox.appendChild(incomingChatLi);
            chatbox.scrollTo(0, chatbox.scrollHeight);
            generateRespond(incomingChatLi)
        }, 600);
    }

    sendChatBtn.addEventListener("click", handleChat);

});


document.addEventListener("DOMContentLoaded", () => {
    const chatInput = document.querySelector(".chat-input textarea");
    const sendChatBtn = document.querySelector(".chat-input button");
    const chatbox = document.querySelector(".chatbox");


    let userMessage;
    const API_KEY = "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";
    
    const createChatLi = (message, className) => {
        const chatLi = document.createElement("li");
        chatLi.classList.add("chat", className);
        let chatContent  = className === "outgoing" ? `<p></p>` : `<img src="./UntitledROBOT AI.png" alt="Logo AI" class="logoAi"><p></p>`;
        chatLi.innerHTML = chatContent;
        chatLi.querySelector("p").textContent = message;
        return chatLi;
    }

    const generateRespond = (incomingChatLi)=> {
        const API_URL = "https://api.openai.com/v1/chat/completions";
        const messageElement = incomingChatLi.querySelector("p");

        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${API_KEY}`
            },
            body: JSON.stringify({
                "model": "gpt-3.5-turbo",
                "messages": [
                  {
                    "role": "system",
                    "content": userMessage
                  },
                  {
                    "role": "user",
                    "content": userMessage
                  }
                ]
            })
        }

        fetch(API_URL, requestOptions).then(res => res.json()).then(data => {
            messageElement.textContent = data.choices[0].message.content;
        }).catch((error) =>{
            messageElement.textContent = "Oops! algo salio mal. Intente de nuevo";
        }).finally(()=> chatbox.scroll(0,chatbox.scrollHeight));
    }

    const handleChat = () => {
        userMessage = chatInput.value.trim();
        if(!userMessage) return;
        chatInput.value = "";


        // Remove the message from the chat input.
        chatInput.value = "";
        chatbox.appendChild(createChatLi(userMessage, "outgoing"));
        chatbox.scrollTo(0, chatbox.scrollHeight);

        setTimeout(()=>{
            const incomingChatLi = createChatLi("Pensando...", "incoming");
            chatbox.appendChild(incomingChatLi);
            chatbox.scrollTo(0, chatbox.scrollHeight);
            generateRespond(incomingChatLi)
        }, 600);
    }

    sendChatBtn.addEventListener("click", handleChat);

});
